Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Machine Learning

## Panda
- NOTE
<pre>
import pandas as pd
dataframe = pd.read_csv(filepath)
dataframe.head()
dataframe.describe()
pd.options.display.max_columns = 20
extracted_column_data = df['col']
extracted_smaller_df = df[['colA', 'colB', 'colC']] &lt;&lt;&lt; note double sq brackets
df['newCol'] = ListDataSet  &lt;&lt;&lt; note to have the same number of rows 
df['newBinaryCol'] = df['existingCol'] == 'istrueforsomethig'  &lt;&lt;&lt; single line to create a binary col

</pre>

### dataframe \- human readable table of data

### model

## Numpy

## Sklearn

## Classification
> leftSide=`true`


### Linear Model

### Logistic Regression Model

#### 0 = C1\*X \+ C2\*y \+C3
- NOTE
<pre>model.coef_ = [C1 C2]
model.intercept_ = [C3]

model.score(X,y) &gt;&gt; shows accuracy percentage
model.predict(X) &gt;&gt; predicts the y based on the model regression</pre>

#### Confusion Matrix
> mmd.image=``,mmd.image.name=`ConfusionMatrix`,mmd.image.uri=`ConfusionMatrix.png`

- NOTE
<pre>The Confusion Matrix is a table showing four values:
• Datapoints we predicted positive that are actually positive
• Datapoints we predicted positive that are actually negative
• Datapoints we predicted negative that are actually positive
• Datapoints we predicted negative that are actually negative 

Precision is the % of model's positive predictions that are correct.
Precision = TP/(TP+FP)

Recall is the % of positive cases that the model predicts correctly.
Recall = TP/(TP+FN)</pre>

### Basic Statistics
